{"version":3,"file":"css/blocks/block_faq.css","mappings":"AAoBA,MAEE,iCAGA,oBACA,sBACA,iBACA,iBACA,uBCtBF,CAHE,gBACE,kBAEA,0BADA,uBAOJ,CAJI,wBAGE,6CACA,kEAFA,qDACA,uBAFA,kBASN,CALM,2CAEE,mDADA,eAEA,UAOR,CANQ,sEACE,WACA,SAQV,CAVQ,6DACE,WACA,SAQV,CAVQ,iEACE,WACA,SAQV,CAVQ,kEACE,WACA,SAQV,CAVQ,wDACE,WACA,SAQV,CALM,4BAEE,YADA,UAQR,CC5BI,yBDmBE,4BAKI,YADA,UAUR,CACF,CARQ,iCACE,YACA,eACA,oBAUV,CALI,sBACE,qBACA,SAON,CALM,2BAME,gBALA,wCAIA,aAEA,mFAOR,CANQ,qCAEE,eADA,SAKA,oBAFA,mBACA,iBAFA,iBAWV,CAPU,2CAQE,+CAPA,WACA,cAEA,YACA,kBAEA,QADA,oBAGA,2KANA,UAeZ,CCvEI,yBDqDM,2CAYI,YACA,qBAFA,UAaZ,CACF,CARQ,mCAEE,aADA,gBAEA,uGAUV,CATU,qCACE,eAWZ,CAPQ,oCACE,6BASV,CARU,oDACE,uDAUZ,CARU,4CACE,kBACA,iFAUZ,C","sources":["webpack://custom-theme/./assets/scss/_variables.scss","webpack://custom-theme/./assets/scss/blocks/block_faq.scss","webpack://custom-theme/./assets/scss/_mixins.scss"],"sourcesContent":["\n// Variables\n$breakpoints: (\n    xxs: 320px,\n    xs: 576px,\n    sm: 768px,\n    md: 992px,\n    lg: 1200px,\n    xl: 1420px,\n    2xl: 1640px,\n    3xl: 1920px ) !default;\n\n$container-max-widths: ( \n    sm: 100%,\n    md: 980px, \n    lg: 1140px, \n    xl: 1360px,\n    2xl: 1500px ) !default;\n\n\n:root {\n  // F prefix for fonts.\n  --f-body        : 'Montserrat', sans-serif;\n\n  // C prefix for colors.\n  --c-primary     : #292929;\n  --c-secondary   : #da002e;\n  --c-heading     : #000000;\n  --c-text        : #4A4B4C;\n  --c--background : #F5F6F7;\n}","@import \"../variables\";\n@import \"../mixins\";\n\n.block_faq {\n  .faq {\n    margin-left: -20px;\n    width: calc( 100% + 40px );\n    max-width: unset!important;\n\n    &__search {\n      margin-bottom: 50px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      input[type=\"search\"] {\n        padding: 0 20px;\n        flex-grow: 1;\n        width: 100%;\n        &::placeholder {\n          color: black;\n          opacity: 1;\n        }\n      }\n      svg {\n        width: 45px;\n        height: 45px;\n        @include media-up(md) {\n          width: 65px;\n          height: 65px;\n        }\n        path {\n          stroke: black;\n          stroke-width: 5;\n          stroke-miterlimit: 10;\n        }\n      }\n    }\n\n    &__list {\n      list-style-type: none;\n      padding: 0;\n\n      &__row {\n        border-bottom: solid 1px rgba( black, .09 );\n        padding-bottom: 20px;\n        padding-left: 20px;\n        padding-right: 20px;\n        padding-top: 20px;\n        background: white;\n        transition: background .3s ease-in-out;\n        .question {\n          margin: 0;\n          cursor: pointer;\n          position: relative;\n          padding-right: 30px;\n          padding-top: 10px;\n          padding-bottom: 10px;\n          &:after {\n            content: '';\n            display: block;\n            width: 18px;\n            height: 18px;\n            position: absolute;\n            top: calc(50% - 9px);\n            right: 0;\n            background-image: url(\"../././svg/chevron-right.svg\");\n            transition: transform .3s ease;\n            @include media-up(md) {\n              width: 22px;\n              height: 22px;\n              top: calc(50% - 11px);\n            }\n          }\n        }\n        .answer {\n          overflow: hidden;\n          max-height: 0;\n          transition: max-height 0.2s cubic-bezier(0, 1, 0, 1);\n          p {\n            margin-bottom: 0;\n          }\n        }\n\n        &.is-shown {\n          background: var( --c-secondary );\n          .question:after {\n            transform: rotate(90deg);\n          }\n          .answer {\n            max-height: 1000px;\n            transition: max-height 1s ease-in-out;\n          }\n        }\n\n      }\n\n    }\n\n  }\n}","// Media up\n@mixin media-up($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    $breakpoint-value: map-get($breakpoints, $breakpoint);\n    @media (min-width: $breakpoint-value) {\n      @content;\n    }\n  } @else {\n    @warn 'Invalid breakpoint: #{$breakpoint}.';\n  }\n}\n\n\n// Media down\n@mixin media-down($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    $breakpoint-value: map-get($breakpoints, $breakpoint);\n    @media (max-width: ($breakpoint-value - 1)) {\n      @content;\n    }\n  } @else {\n    @warn 'Invalid breakpoint: #{$breakpoint}.';\n  }\n}\n\n\n// Media between (lower resolution, upper resolution)\n@mixin media-between($lower, $upper) {\n  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {\n    $lower-breakpoint: map-get($breakpoints, $lower);\n    $upper-breakpoint: map-get($breakpoints, $upper);\n    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {\n      @content;\n    }\n  } @else {\n    @if (map-has-key($breakpoints, $lower) == false) {\n      @warn 'Your lower breakpoint was invalid: #{$lower}.';\n    }\n    @if (map-has-key($breakpoints, $upper) == false) {\n      @warn 'Your upper breakpoint was invalid: #{$upper}.';\n    }\n  }\n}\n\n\n// Container max widths\n@mixin container-max-widths() {\n  @each $breakpoint, $container-max-width in $container-max-widths {\n    @include media-up($breakpoint) {\n      max-width: $container-max-width !important;\n    }\n  }\n}\n\n\n// Disable user selection\n@mixin nonselect {\n  user-select: none;\n}\n\n\n// Color\n@function color($name: 'text',$scheme: 'light', $opacity: 1) {\n  $color-schemes: map-get($colors, $scheme);\n  $color: map-get($color-schemes, $name);\n\n  @return rgba($color, $opacity);\n}\n\n\n// Row\n@mixin row() {\n  display: flex;\n  flex-flow: row wrap;\n}\n\n\n// Column\n@mixin col($sizes...) {\n  display: flex;\n  flex-grow: 0;\n  flex-shrink: 1;\n  flex-basis: 100%;\n  @each $size in $sizes {\n    @if map-has-key($breakpoints, nth($size,1)) {\n      @include media-up(nth($size,1)) {\n        $width: ((100% / $grid-columns) * nth($size,2));\n        flex-basis: $width;\n        max-width: $width;\n      }\n    }\n  }\n}"],"names":[],"sourceRoot":""}