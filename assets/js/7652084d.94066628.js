"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[835],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),k=o,m=u["".concat(s,".").concat(k)]||u[k]||d[k]||r;return t?a.createElement(m,l(l({ref:n},p),{},{components:t})):a.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=k;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},3833:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:7},l="Definiowanie blok\xf3w gutenberg",i={unversionedId:"gutenberg-blocks",id:"gutenberg-blocks",title:"Definiowanie blok\xf3w gutenberg",description:"Najprostsza posta\u0107 bloku ACF:",source:"@site/docs/gutenberg-blocks.md",sourceDirName:".",slug:"/gutenberg-blocks",permalink:"/versa-wp-wordpress-starter-template/gutenberg-blocks",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"View/class, block/class",permalink:"/versa-wp-wordpress-starter-template/view-class-block-class"},next:{title:"Widoki dla stron",permalink:"/versa-wp-wordpress-starter-template/views-for-pages"}},s={},c=[{value:"Dodatkowe w\u0142a\u015bciwo\u015bci kt\xf3re mo\u017cemy zdefiniowa\u0107 w konstruktorze klasy",id:"dodatkowe-w\u0142a\u015bciwo\u015bci-kt\xf3re-mo\u017cemy-zdefiniowa\u0107-w-konstruktorze-klasy",level:2},{value:"Style i skrypty",id:"style-i-skrypty",level:2},{value:"Pola ACF dodane z kodu",id:"pola-acf-dodane-z-kodu",level:2},{value:"Zewn\u0119trzne pliki szablon\xf3w html",id:"zewn\u0119trzne-pliki-szablon\xf3w-html",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"definiowanie-blok\xf3w-gutenberg"},"Definiowanie blok\xf3w gutenberg"),(0,o.kt)("p",null,"Najprostsza posta\u0107 bloku ACF:\nDodajemy plik class-nazwa-klasy.php do katalogu /inc/blocks, w kt\xf3rym rozszerzamy klas\u0119 Abstract_Block:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="File: ../inc/block/class-nazwa-klasy.php"',title:'"File:','../inc/block/class-nazwa-klasy.php"':!0},"namespace WLC\\Blocks;\n\nuse WLC\\Core\\Abstract_Block;\n\nif ( ! defined( 'ABSPATH' ) ) {\n    exit;\n};\n\n/**\n * Simple block structure and content.\n */\nclass Simple_Block extends Abstract_Block {\n\n    /**\n     * Simple block constructor.\n     */\n    public function __construct() {\n        parent::__construct();\n        $this->title       = __( 'Simple block', 'WLC' );\n        $this->description = __( 'Simple block description', 'WLC' );\n    }\n\n    /**\n     * Render frontend template.\n     *\n     * @param array  $block block.\n     * @param string $content content.\n     * @param false  $is_preview preview switch.\n     * @param int    $post_id ID post.\n     */\n    public function render_frontend( array $block, $content = '', $is_preview = false, $post_id = 0 ) {\n        $content = get_field( $this->block_name );\n        $data    = explode( '_', $block['id'] )[1];\n        $id      = isset( $block['anchor'] ) ?? $data;\n        $class   = $this->get_block_class( $block );\n\n        ?>\n        <section id=\"<?php echo esc_attr( $id ); ?>\" class=\"<?php echo esc_attr( $class ); ?>\">\n            <div class=\"container\">\n                <h2>Title</h2>\n                <div class=\"text\">\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec libero sem, volutpat vel vehicula id, luctus eget turpis. Sed in eros non enim eleifend mattis eget eu orci. \n                </div>\n            </div>\n        </section>\n        <?php\n    }\n}\n")),(0,o.kt)("p",null,'W konstruktorze definiujemy w\u0142a\u015bciwo\u015bci klasy $title i $description ($title - wymagany)\nDefiniujemy metod\u0119 render_frontend() z definicj\u0105 zmiennych\n$content - zawiera tablic\u0119 warto\u015bci grupy p\xf3l ACF (Grupa p\xf3l ACF powinna posiada\u0107 nazw\u0119 naszej klasy w postaci "nazwa-klasy".\nTak zdefiniowana grupa p\xf3l b\u0119dzie w dost\u0119pna w naszym szablonie w postaci tablicy p\xf3l.\nW metodzie render_frontend() definiujemy r\xf3wnie\u017c szablon html bloku.\nTak przygotowan\u0105 klas\u0119 \u0142adujemy w pliku functions.php'),(0,o.kt)("h2",{id:"dodatkowe-w\u0142a\u015bciwo\u015bci-kt\xf3re-mo\u017cemy-zdefiniowa\u0107-w-konstruktorze-klasy"},"Dodatkowe w\u0142a\u015bciwo\u015bci kt\xf3re mo\u017cemy zdefiniowa\u0107 w konstruktorze klasy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="File: ../inc/core/class-abstract-block.php"',title:'"File:','../inc/core/class-abstract-block.php"':!0},"/**\n* Block category.\n*\n* @var string $category  Blocks are grouped into categories to help users browse and discover them.\n* The core provided categories are [ common | formatting | layout | widgets | embed ]\n*/\npublic $category = 'wlc';\n \n/**\n* Icon.\n*\n* @var string|array $icon (Optional) An icon property can be specified to make it easier to identify a block. These can be any of WordPress\u2019 Dashicons, or a custom svg element.\n*/\npublic $icon = 'block-default';\n \n/**\n* Align.\n*\n* @var string (Optional) The default block alignment.\n* Available settings are left, center, right, wide and full.\n*/\npublic $align = 'wide';\n \n/**\n * Align supports.\n *\n * @var bool|array $supports_align Category displayed name.\n */\n\npublic $supports_align = array( 'full', 'wide' );\n")),(0,o.kt)("h2",{id:"style-i-skrypty"},"Style i skrypty"),(0,o.kt)("p",null,"Definiuj\u0105c metod\u0119 enqueue_assets() mo\u017cemy doda\u0107 do bloku style i skrypty \u0142adowane tylko na stronach, na kt\xf3rych wyst\u0119puje dany blok."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="File: .../wlc-starter-demo/inc/core/class-abstract-block.php"',title:'"File:','.../wlc-starter-demo/inc/core/class-abstract-block.php"':!0},"/**\n * Enqueue js and css files for this block.\n *\n * You can use within one of these:\n *\n * @uses WLC\\Core\\Enqueue\\enqueue_style()\n * @uses WLC\\Core\\Enqueue\\enqueue_script()\n * @uses wp_enqueue_script()\n * @uses wp_enqueue_style()\n */\n\npublic function enqueue_assets() {}\n")),(0,o.kt)("p",null,"przyk\u0142ad:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"public function enqueue_assets() {\n    $this->enqueue_style( 'simple-block', 'blocks/simple_block.css' );\n}\n")),(0,o.kt)("p",null,"Mo\u017cemy do tego wykorzysta\u0107 funkcje pomocnicze"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"WLC\\Core\\Enqueue\\enqueue_style()\nWLC\\Core\\Enqueue\\enqueue_script()\n")),(0,o.kt)("p",null,"lub funkcje wp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"wp_enqueue_script()\nwp_enqueue_style()\n")),(0,o.kt)("h2",{id:"pola-acf-dodane-z-kodu"},"Pola ACF dodane z kodu"),(0,o.kt)("p",null,"Je\u015bli chcemy przygotowa\u0107 zestaw p\xf3l widocznych w panelu administracyjnym WorpdPress, mo\u017cemy do tego wykorzysta\u0107 metod\u0119:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"public function add_local_field_group() {\n    code here\u2026\n}\n")),(0,o.kt)("p",null,"Dodaj\u0105c do niej kod PHP grupy p\xf3l."),(0,o.kt)("h2",{id:"zewn\u0119trzne-pliki-szablon\xf3w-html"},"Zewn\u0119trzne pliki szablon\xf3w html"),(0,o.kt)("p",null,"Plik z nazw\u0105 nazwa-klasy.php dodajemy do katalogu template_parts/blocks/\nPlik jest automatycznie do\u0142\u0105czany i ma pierwsze\u0144stwo przed metod\u0105 render_frontend(){}"),(0,o.kt)("p",null,"przyk\u0142ad pliku html"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<section id="<?php echo esc_attr( $id ); ?>" class="<?php echo esc_attr( $class ); ?>">\n    <div class="container">\n        <h2>Title</h2>\n        <div class="text">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit... \n        </div>\n    </div>\n</section>\n')),(0,o.kt)("p",null,"Podobnie jak przy metodzie render_frontend(){} mamy dost\u0119p do tablicy zapisanej w zmiennej $content z warto\u015bciami p\xf3l ACF."))}d.isMDXComponent=!0}}]);