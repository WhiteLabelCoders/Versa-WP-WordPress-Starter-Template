"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[36],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,h=d["".concat(o,".").concat(f)]||d[f]||u[f]||l;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<l;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:7},s="Defining Gutenberg blocks",i={unversionedId:"gutenberg-blocks",id:"gutenberg-blocks",title:"Defining Gutenberg blocks",description:"The simplest form of the ACF block:",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/gutenberg-blocks.md",sourceDirName:".",slug:"/gutenberg-blocks",permalink:"/wlc-starter/en/gutenberg-blocks",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"View/class, block/class",permalink:"/wlc-starter/en/view-class-block-class"},next:{title:"Views for pages",permalink:"/wlc-starter/en/views-for-pages"}},o={},c=[{value:"Other properties that we can define in the class constructor",id:"other-properties-that-we-can-define-in-the-class-constructor",level:2},{value:"Styles and scripts",id:"styles-and-scripts",level:2},{value:"ACF fields added from code",id:"acf-fields-added-from-code",level:2},{value:"html template files",id:"html-template-files",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"defining-gutenberg-blocks"},"Defining Gutenberg blocks"),(0,a.kt)("p",null,"The simplest form of the ACF block:\nLet\u2019s add the file class -class-name.php to the /inc/blocks directory, in which we extend the Abstract_Block class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="File: ../inc/block/class-nazwa-klasy.php"',title:'"File:','../inc/block/class-nazwa-klasy.php"':!0},"namespace WLC\\Blocks;\n\nuse WLC\\Core\\Abstract_Block;\n\nif ( ! defined( 'ABSPATH' ) ) {\n    exit;\n};\n\n/**\n * Simple block structure and content.\n */\nclass Simple_Block extends Abstract_Block {\n\n    /**\n     * Simple block constructor.\n     */\n    public function __construct() {\n        parent::__construct();\n        $this->title       = __( 'Simple block', 'WLC' );\n        $this->description = __( 'Simple block description', 'WLC' );\n    }\n\n    /**\n     * Render frontend template.\n     *\n     * @param array  $block block.\n     * @param string $content content.\n     * @param false  $is_preview preview switch.\n     * @param int    $post_id ID post.\n     */\n    public function render_frontend( array $block, $content = '', $is_preview = false, $post_id = 0 ) {\n        $content = get_field( $this->block_name );\n        $data    = explode( '_', $block['id'] )[1];\n        $id      = isset( $block['anchor'] ) ?? $data;\n        $class   = $this->get_block_class( $block );\n\n        ?>\n        <section id=\"<?php echo esc_attr( $id ); ?>\" class=\"<?php echo esc_attr( $class ); ?>\">\n            <div class=\"container\">\n                <h2>Title</h2>\n                <div class=\"text\">\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec libero sem, volutpat vel vehicula id, luctus eget turpis. Sed in eros non enim eleifend mattis eget eu orci. \n                </div>\n            </div>\n        </section>\n        <?php\n    }\n}\n")),(0,a.kt)("p",null,'In the constructor, we define the properties of the $title and $description class ($title is needed).\nWe define the render_frontend() method with the definition of\n$content variables - it contains an array of ACF field group values \u200b\u200b(ACF field group should have our class name in the form of "class-name").\nA group of fields defined in this way will be available in our template in the form of an fields array.\nIn the render_frontend() method, we also define the block\'s html theme.\nLoad the class prepared in this way in the file functions.php'),(0,a.kt)("h2",{id:"other-properties-that-we-can-define-in-the-class-constructor"},"Other properties that we can define in the class constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="File: ../inc/core/class-abstract-block.php"',title:'"File:','../inc/core/class-abstract-block.php"':!0},"/**\n* Block category.\n*\n* @var string $category  Blocks are grouped into categories to help users browse and discover them.\n* The core provided categories are [ common | formatting | layout | widgets | embed ]\n*/\npublic $category = 'wlc';\n \n/**\n* Icon.\n*\n* @var string|array $icon (Optional) An icon property can be specified to make it easier to identify a block. These can be any of WordPress\u2019 Dashicons, or a custom svg element.\n*/\npublic $icon = 'block-default';\n \n/**\n* Align.\n*\n* @var string (Optional) The default block alignment.\n* Available settings are left, center, right, wide and full.\n*/\npublic $align = 'wide';\n \n/**\n * Align supports.\n *\n * @var bool|array $supports_align Category displayed name.\n */\n\npublic $supports_align = array( 'full', 'wide' );\n")),(0,a.kt)("h2",{id:"styles-and-scripts"},"Styles and scripts"),(0,a.kt)("p",null,"Defining the enqueue_assets() method, we can add styles and scripts that are loaded only on pages where the block is used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="File: .../wlc-starter-demo/inc/core/class-abstract-block.php"',title:'"File:','.../wlc-starter-demo/inc/core/class-abstract-block.php"':!0},"/**\n * Enqueue js and css files for this block.\n *\n * You can use within one of these:\n *\n * @uses WLC\\Core\\Enqueue\\enqueue_style()\n * @uses WLC\\Core\\Enqueue\\enqueue_script()\n * @uses wp_enqueue_script()\n * @uses wp_enqueue_style()\n */\n\npublic function enqueue_assets() {}\n")),(0,a.kt)("p",null,"example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function enqueue_assets() {\n    $this->enqueue_style( 'simple-block', 'blocks/simple_block.css' );\n}\n")),(0,a.kt)("p",null,"We can use auxiliary functions for this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"WLC\\Core\\Enqueue\\enqueue_style()\nWLC\\Core\\Enqueue\\enqueue_script()\n")),(0,a.kt)("p",null,"or built-in WP functions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"wp_enqueue_script()\nwp_enqueue_style()\n")),(0,a.kt)("h2",{id:"acf-fields-added-from-code"},"ACF fields added from code"),(0,a.kt)("p",null,"If we want to prepare a set of fields visible in the WorpdPress administration panel , we can use the following method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function add_local_field_group() {\n    code here\u2026\n}\n")),(0,a.kt)("p",null,"by adding the PHP code of the field group to it."),(0,a.kt)("h2",{id:"html-template-files"},"html template files"),(0,a.kt)("p",null,"File named nazwa-klasy.php should be added to the template_parts/blocks/ directory.\nThe file is automatically included and takes precedence over the render_frontend(){} method"),(0,a.kt)("p",null,"html file example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<section id="<?php echo esc_attr( $id ); ?>" class="<?php echo esc_attr( $class ); ?>">\n    <div class="container">\n        <h2>Title</h2>\n        <div class="text">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit... \n        </div>\n    </div>\n</section>\n')),(0,a.kt)("p",null,"Similarly to the render_frontend(){} method, we have access to the array stored in the variable with the ACF field values - $content."))}u.isMDXComponent=!0}}]);